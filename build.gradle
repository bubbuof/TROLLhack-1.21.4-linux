plugins {
    id 'fabric-loom' version '1.7.4'
    id 'maven-publish'
    id("org.jetbrains.kotlin.jvm") version "1.9.21"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    mavenCentral()
}

loom {
    accessWidenerPath = file("src/main/resources/matebal.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    modCompileOnly "meteordevelopment:baritone:1.21.4-SNAPSHOT"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.21"
}

// Функция для поиска правильного пути к Java
def findJavaHome() {
    def javaHome = System.getProperty('java.home')
    def possiblePaths = [
            "${javaHome}/jmods/java.base.jmod",
            "${javaHome}/../jmods/java.base.jmod",
            "/usr/lib/jvm/java-21-openjdk/jmods/java.base.jmod",
            "/usr/lib/jvm/java-21/jmods/java.base.jmod",
            "/usr/lib/jvm/java-17-openjdk/jmods/java.base.jmod",
            "/usr/lib/jvm/java-17/jmods/java.base.jmod"
    ]

    for (path in possiblePaths) {
        def file = file(path)
        if (file.exists()) {
            println "Found Java base module at: ${file.path}"
            return file.path
        }
    }

    // Если не нашли jmod, используем rt.jar или классы
    def rtJarPath = "${javaHome}/lib/rt.jar"
    if (file(rtJarPath).exists()) {
        println "Using rt.jar at: ${rtJarPath}"
        return rtJarPath
    }

    // Последний вариант - использовать классы из Java home
    println "Using Java classes from: ${javaHome}"
    return "${javaHome}/lib"
}

// Простая задача обфускации с исправленными путями
tasks.register('obfuscateJar', JavaExec) {
    dependsOn remapJar

    def proguardJar = file("proguard-7.4.1/lib/proguard.jar")
    def javaBasePath = findJavaHome()

    classpath = files(proguardJar)
    mainClass = 'proguard.ProGuard'

    args = [
            '@proguard-rules.pro',
            '-injars', tasks.named("remapJar").get().archiveFile.get().asFile.path,
            '-outjars', "${layout.buildDirectory.get()}/libs/${project.archives_base_name}-${project.mod_version}-obfuscated.jar",
            '-libraryjars', javaBasePath,
            '-libraryjars', configurations.compileClasspath.asPath,
            '-dontwarn',
            '-ignorewarnings'
    ]

    doFirst {
        if (!proguardJar.exists()) {
            throw new GradleException("ProGuard not found. Please download it manually:\n" +
                    "wget https://github.com/Guardsquare/proguard/releases/download/v7.4.1/proguard-7.4.1.tar.gz\n" +
                    "tar xzf proguard-7.4.1.tar.gz")
        }

        println "Using Java path: ${javaBasePath}"
        println "Input JAR: ${tasks.named("remapJar").get().archiveFile.get().asFile.path}"
        println "Output JAR: ${layout.buildDirectory.get()}/libs/${project.archives_base_name}-${project.mod_version}-obfuscated.jar"
    }
}

tasks.register('buildObfuscated') {
    group = 'build'
    description = 'Builds the obfuscated version of the mod'
    dependsOn obfuscateJar
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    }
}